n.sample, M, pG, mRate = 0, K, init, delta, frailty = T, abc = T, range.t, check = F)
library(foreach)
library(doParallel)
registerDoParallel(cores = 20)
library(LFSPRO)
sourceDir <- function(path, trace = TRUE, ...) {
for (nm in list.files(path, pattern = "[.][RrSsQq]$")) {
if(trace) cat(nm,":")
source(file.path(path, nm), ...)
if(trace) cat("\n")
}
}
sourceDir("fn")
batch <- 1
n.sim <- 20
start <- n.sim * (batch - 1) + 1
end <- n.sim * batch
K <- 2
N <- 300
phi <- rep(1, K)
# estimation setting
n.sample <- 30000  # of posterior samples
M <- 2             # degrees of Bernstein polynomials
# Set-up
true.beta <- beta <- matrix(c(3, 1, 2, 2, 2, 1), nrow = 3) # regression coefficients (test, D_1, D_2)
lambda <- c(0.001, 0.001)     # baseline intensity
theta.c <- 80                 # hazard for censoring time
pG <- pi <- 0.001             # maf prevalence
cancer_type <- c(1, 2)
dyn.load("fn/cpp/source/CalPeelingProbLIK.so")
iter <- 1
temp <- data.gen(seed = iter, N, pi, beta, lambda, theta.c, phi, miss = T)
library(foreach)
library(doParallel)
registerDoParallel(cores = 20)
library(LFSPRO)
sourceDir <- function(path, trace = TRUE, ...) {
for (nm in list.files(path, pattern = "[.][RrSsQq]$")) {
if(trace) cat(nm,":")
source(file.path(path, nm), ...)
if(trace) cat("\n")
}
}
sourceDir("fn")
batch <- 1
n.sim <- 20
start <- n.sim * (batch - 1) + 1
end <- n.sim * batch
K <- 2
N <- 300
phi <- rep(1, K)
# estimation setting
n.sample <- 30000  # of posterior samples
M <- 2             # degrees of Bernstein polynomials
# Set-up
true.beta <- beta <- matrix(c(3, 1, 2, 2, 2, 1), nrow = 3) # regression coefficients (test, D_1, D_2)
lambda <- c(0.001, 0.001)     # baseline intensity
theta.c <- 80                 # hazard for censoring time
pG <- pi <- 0.001             # maf prevalence
cancer_type <- c(1, 2)
dyn.load("fn/cpp/source/CalPeelingProbLIK.so")
iter <- 1
temp <- data.gen(seed = iter, N, pi, beta, lambda, theta.c, phi, miss = T)
data.obj1 <- temp$data.obj1 # pedigree
data.obj2 <- temp$data.obj2 # disease history
cancer <- temp$cancer.obj # cancer
# rescaling constant for Bernstein Polynomials
range.t <- max(unlist(lapply(data.obj2, function(x) max(x[,2])))) + 1.0e-3
# Initial Values
init  <- list(beta = true.beta - 5, gamma = matrix(1, nrow = M, ncol = K),
xi = matrix(0.1, nrow = N, ncol = K), phi = phi)
delta <- list(beta = matrix(c(0.7, 1, 0.8, 0.7, 1, 0.8), ncol = K), gamma = matrix(1, nrow = M, ncol = K),
xi = matrix(0.1, nrow = N, ncol = K), phi = rep(1, K))
# MCMC sampling
obj <- MCMC(data.obj1, data.obj2, cancer, cancer_type,
n.sample, M, pG, mRate = 0, K, init, delta, frailty = T, abc = T, range.t, check = F)
library(foreach)
library(doParallel)
registerDoParallel(cores = 20)
library(LFSPRO)
sourceDir <- function(path, trace = TRUE, ...) {
for (nm in list.files(path, pattern = "[.][RrSsQq]$")) {
if(trace) cat(nm,":")
source(file.path(path, nm), ...)
if(trace) cat("\n")
}
}
sourceDir("fn")
# MCMC sampling
obj <- MCMC(data.obj1, data.obj2, cancer, cancer_type,
n.sample, M, pG, mRate = 0, K, init, delta, frailty = T, abc = T, range.t, check = F)
library(foreach)
library(doParallel)
registerDoParallel(cores = 50)
library(LFSPRO)
sourceDir <- function(path, trace = TRUE, ...) {
for (nm in list.files(path, pattern = "[.][RrSsQq]$")) {
if(trace) cat(nm,":")
source(file.path(path, nm), ...)
if(trace) cat("\n")
}
}
sourceDir("fn")
batch <- 1
n.sim <- 50
start <- n.sim * (batch - 1) + 1
end <- n.sim * batch
K <- 2
N <- 300
phi <- rep(1, K)
# estimation setting
n.sample <- 30000  # of posterior samples
M <- 2             # degrees of Bernstein polynomials
# Set-up
true.beta <- beta <- matrix(c(3, 1, 2, 2, 2, 1), nrow = 3) # regression coefficients (test, D_1, D_2)
lambda <- c(0.001, 0.001)     # baseline intensity
theta.c <- 80                 # hazard for censoring time
pG <- pi <- 0.001             # maf prevalence
cancer_type <- c(1, 2)
iter <- 1
dyn.load("fn/cpp/source/CalPeelingProbLIK.so")
temp <- data.gen(seed = iter, N, pi, beta, lambda, theta.c, phi, miss = T)
library(foreach)
library(doParallel)
registerDoParallel(cores = 50)
library(LFSPRO)
sourceDir <- function(path, trace = TRUE, ...) {
for (nm in list.files(path, pattern = "[.][RrSsQq]$")) {
if(trace) cat(nm,":")
source(file.path(path, nm), ...)
if(trace) cat("\n")
}
}
sourceDir("fn")
batch <- 1
n.sim <- 50
start <- n.sim * (batch - 1) + 1
end <- n.sim * batch
K <- 2
N <- 300
phi <- rep(1, K)
# estimation setting
n.sample <- 30000  # of posterior samples
M <- 2             # degrees of Bernstein polynomials
# Set-up
true.beta <- beta <- matrix(c(3, 1, 2, 2, 2, 1), nrow = 3) # regression coefficients (test, D_1, D_2)
lambda <- c(0.001, 0.001)     # baseline intensity
theta.c <- 80                 # hazard for censoring time
pG <- pi <- 0.001             # maf prevalence
cancer_type <- c(1, 2)
dyn.load("fn/cpp/source/CalPeelingProbLIK.so")
temp <- data.gen(seed = iter, N, pi, beta, lambda, theta.c, phi, miss = T)
data.obj1 <- temp$data.obj1 # pedigree
data.obj2 <- temp$data.obj2 # disease history
cancer <- temp$cancer.obj # cancer
# rescaling constant for Bernstein Polynomials
range.t <- max(unlist(lapply(data.obj2, function(x) max(x[,2])))) + 1.0e-3
# Initial Values
init  <- list(beta = true.beta - 5, gamma = matrix(1, nrow = M, ncol = K),
xi = matrix(0.1, nrow = N, ncol = K), phi = phi)
delta <- list(beta = matrix(c(0.7, 1, 0.8, 0.7, 1, 0.8), ncol = K), gamma = matrix(1, nrow = M, ncol = K),
xi = matrix(0.1, nrow = N, ncol = K), phi = rep(1, K))
# MCMC sampling
obj <- MCMC(data.obj1, data.obj2, cancer, cancer_type,
n.sample, M, pG, mRate = 0, K, init, delta, frailty = T, abc = T, range.t, check = F)
sourceDir <- function(path, trace = TRUE, ...) {
for (nm in list.files(path, pattern = "[.][RrSsQq]$")) {
if(trace) cat(nm,":")
source(file.path(path, nm), ...)
if(trace) cat("\n")
}
}
sourceDir("fn")
batch <- 2
n.sim <- 25
start <- n.sim * (batch - 1) + 1
end <- n.sim * batch
K <- 2
N <- 300
phi <- rep(1, K)
# estimation setting
n.sample <- 60000  # of posterior samples
M <- 2             # degrees of Bernstein polynomials
# Set-up
true.beta <- beta <- matrix(c(4, 2, 3, 3, 3, 2), nrow = 3) # regression coefficients (test, D_1, D_2)
lambda <- c(0.0005, 0.0005)   # baseline intensity
theta.c <- 80                 # hazard for censoring time
pG <- pi <- 0.001             # maf prevalence
cancer_type <- c(1, 2)
dyn.load("fn/cpp/source/CalPeelingProbLIK.so")
iter <- 50
temp <- data.gen(seed = iter, N, pi, beta, lambda, theta.c, phi, miss = T)
data.obj1 <- temp$data.obj1 # pedigree
data.obj2 <- temp$data.obj2 # disease history
cancer <- temp$cancer.obj # cancer
cancer[[1]]
cancer[[2]]
cancer[[3]]
cancer[[4]]
cancer[[5]]
cancer[[6]]
data.obj1 <- temp$data.obj1 # pedigree
data.obj2 <- temp$data.obj2 # disease history
cancer <- temp$cancer.obj # cancer
# rescaling constant for Bernstein Polynomials
range.t <- max(unlist(lapply(data.obj2, function(x) max(x[,2])))) + 1.0e-3
# Initial Values
init  <- list(beta = true.beta - 5, gamma = matrix(1, nrow = M, ncol = K),
xi = matrix(0.1, nrow = N, ncol = K), phi = phi)
delta <- list(beta = matrix(c(0.7, 1, 0.8, 0.7, 1, 0.8), ncol = K), gamma = matrix(1, nrow = M, ncol = K),
xi = matrix(0.1, nrow = N, ncol = K), phi = rep(1, K))
# MCMC sampling
obj <- MCMC(data.obj1, data.obj2, cancer, cancer_type,
n.sample, M, pG, mRate = 0, K, init, delta, frailty = T, abc = T, range.t, check = F)
sourceDir("fn")
# MCMC sampling
obj <- MCMC(data.obj1, data.obj2, cancer, cancer_type,
n.sample, M, pG, mRate = 0, K, init, delta, frailty = T, abc = T, range.t, check = F)
iter <- 50
sourceDir <- function(path, trace = TRUE, ...) {
for (nm in list.files(path, pattern = "[.][RrSsQq]$")) {
if(trace) cat(nm,":")
source(file.path(path, nm), ...)
if(trace) cat("\n")
}
}
sourceDir("fn")
dyn.load("fn/cpp/source/CalPeelingProbLIK.so")
temp <- data.gen(seed = iter, N, pi, beta, lambda, theta.c, phi, miss = T)
sourceDir <- function(path, trace = TRUE, ...) {
for (nm in list.files(path, pattern = "[.][RrSsQq]$")) {
if(trace) cat(nm,":")
source(file.path(path, nm), ...)
if(trace) cat("\n")
}
}
sourceDir("fn")
temp <- data.gen(seed = iter, N, pi, beta, lambda, theta.c, phi, miss = T)
data.obj1 <- temp$data.obj1 # pedigree
data.obj2 <- temp$data.obj2 # disease history
cancer <- temp$cancer.obj # cancer
# rescaling constant for Bernstein Polynomials
range.t <- max(unlist(lapply(data.obj2, function(x) max(x[,2])))) + 1.0e-3
# Initial Values
init  <- list(beta = true.beta - 5, gamma = matrix(1, nrow = M, ncol = K),
xi = matrix(0.1, nrow = N, ncol = K), phi = phi)
delta <- list(beta = matrix(c(0.7, 1, 0.8, 0.7, 1, 0.8), ncol = K), gamma = matrix(1, nrow = M, ncol = K),
xi = matrix(0.1, nrow = N, ncol = K), phi = rep(1, K))
# MCMC sampling
obj <- MCMC(data.obj1, data.obj2, cancer, cancer_type,
n.sample, M, pG, mRate = 0, K, init, delta, frailty = T, abc = T, range.t, check = F)
# Set-up
true.beta <- beta <- matrix(c(4, 2, 3, 3, 3, 2), nrow = 3) # regression coefficients (test, D_1, D_2)
lambda <- c(0.001, 0.001)     # baseline intensity
theta.c <- 80                 # hazard for censoring time
pG <- pi <- 0.001             # maf prevalence
cancer_type <- c(1, 2)
dyn.load("fn/cpp/source/CalPeelingProbLIK.so")
temp <- data.gen(seed = iter, N, pi, beta, lambda, theta.c, phi, miss = T)
data.obj1 <- temp$data.obj1 # pedigree
data.obj2 <- temp$data.obj2 # disease history
cancer <- temp$cancer.obj # cancer
# rescaling constant for Bernstein Polynomials
range.t <- max(unlist(lapply(data.obj2, function(x) max(x[,2])))) + 1.0e-3
# Initial Values
init  <- list(beta = true.beta - 5, gamma = matrix(1, nrow = M, ncol = K),
xi = matrix(0.1, nrow = N, ncol = K), phi = phi)
delta <- list(beta = matrix(c(0.7, 1, 0.8, 0.7, 1, 0.8), ncol = K), gamma = matrix(1, nrow = M, ncol = K),
xi = matrix(0.1, nrow = N, ncol = K), phi = rep(1, K))
# MCMC sampling
obj <- MCMC(data.obj1, data.obj2, cancer, cancer_type,
n.sample, M, pG, mRate = 0, K, init, delta, frailty = T, abc = T, range.t, check = F)
iter
a <- 0
for (i in 1:300) {
fam <- cancer[[i]]
id <- unique(fam$id)
for (j in 1:length(id)) {
if (nrow(fam[fam$id == id[j],]) > 1) {
a <- a + 1
}
}
}
a
a <- 0
for (i in 1:300) {
fam <- cancer[[i]]
id <- unique(fam$id)
for (j in 1:length(id)) {
if (nrow(fam[fam$id == id[j],]) > 2) {
a <- a + 1
}
}
}
a
sourceDir <- function(path, trace = TRUE, ...) {
for (nm in list.files(path, pattern = "[.][RrSsQq]$")) {
if(trace) cat(nm,":")
source(file.path(path, nm), ...)
if(trace) cat("\n")
}
}
sourceDir("fn")
batch <- 2
n.sim <- 25
start <- n.sim * (batch - 1) + 1
end <- n.sim * batch
K <- 2
N <- 200
phi <- rep(1, K)
# estimation setting
n.sample <- 60000  # of posterior samples
M <- 2             # degrees of Bernstein polynomials
# Set-up
true.beta <- beta <- matrix(c(4, 2, 3, 3, 3, 2), nrow = 3) # regression coefficients (test, D_1, D_2)
lambda <- c(0.001, 0.001)     # baseline intensity
theta.c <- 80                 # hazard for censoring time
pG <- pi <- 0.001             # maf prevalence
cancer_type <- c(1, 2)
dyn.load("fn/cpp/source/CalPeelingProbLIK.so")
iter <- 50
temp <- data.gen(seed = iter, N, pi, beta, lambda, theta.c, phi, miss = T)
data.obj1 <- temp$data.obj1 # pedigree
data.obj2 <- temp$data.obj2 # disease history
cancer <- temp$cancer.obj # cancer
# rescaling constant for Bernstein Polynomials
range.t <- max(unlist(lapply(data.obj2, function(x) max(x[,2])))) + 1.0e-3
# Initial Values
init  <- list(beta = true.beta - 5, gamma = matrix(1, nrow = M, ncol = K),
xi = matrix(0.1, nrow = N, ncol = K), phi = phi)
delta <- list(beta = matrix(c(0.7, 1, 0.8, 0.7, 1, 0.8), ncol = K), gamma = matrix(1, nrow = M, ncol = K),
xi = matrix(0.1, nrow = N, ncol = K), phi = rep(1, K))
# MCMC sampling
obj <- MCMC(data.obj1, data.obj2, cancer, cancer_type,
n.sample, M, pG, mRate = 0, K, init, delta, frailty = T, abc = T, range.t, check = F)
a <- 0
for (i in 1:300) {
fam <- cancer[[i]]
id <- unique(fam$id)
for (j in 1:length(id)) {
if (nrow(fam[fam$id == id[j],]) > 2) {
a <- a + 1
}
}
}
a <- 0
for (i in 1:200) {
fam <- cancer[[i]]
id <- unique(fam$id)
for (j in 1:length(id)) {
if (nrow(fam[fam$id == id[j],]) > 2) {
a <- a + 1
}
}
}
a
iter <- 1
temp <- data.gen(seed = iter, N, pi, beta, lambda, theta.c, phi, miss = T)
iter <- 30
temp <- data.gen(seed = iter, N, pi, beta, lambda, theta.c, phi, miss = T)
data.obj1 <- temp$data.obj1 # pedigree
data.obj2 <- temp$data.obj2 # disease history
cancer <- temp$cancer.obj # cancer
# rescaling constant for Bernstein Polynomials
range.t <- max(unlist(lapply(data.obj2, function(x) max(x[,2])))) + 1.0e-3
# Initial Values
init  <- list(beta = true.beta - 5, gamma = matrix(1, nrow = M, ncol = K),
xi = matrix(0.1, nrow = N, ncol = K), phi = phi)
delta <- list(beta = matrix(c(0.7, 1, 0.8, 0.7, 1, 0.8), ncol = K), gamma = matrix(1, nrow = M, ncol = K),
xi = matrix(0.1, nrow = N, ncol = K), phi = rep(1, K))
# MCMC sampling
obj <- MCMC(data.obj1, data.obj2, cancer, cancer_type,
n.sample, M, pG, mRate = 0, K, init, delta, frailty = T, abc = T, range.t, check = F)
iter
temp <- data.gen(seed = iter, N, pi, beta, lambda, theta.c, phi, miss = T)
iter <- 1
temp <- data.gen(seed = iter, N, pi, beta, lambda, theta.c, phi, miss = T)
iter <- 2
temp <- data.gen(seed = iter, N, pi, beta, lambda, theta.c, phi, miss = T)
iter <- 3
temp <- data.gen(seed = iter, N, pi, beta, lambda, theta.c, phi, miss = T)
iter <- 4
temp <- data.gen(seed = iter, N, pi, beta, lambda, theta.c, phi, miss = T)
iter <- 5
temp <- data.gen(seed = iter, N, pi, beta, lambda, theta.c, phi, miss = T)
N <- 250
iter <- 5
temp <- data.gen(seed = iter, N, pi, beta, lambda, theta.c, phi, miss = T)
sourceDir <- function(path, trace = TRUE, ...) {
for (nm in list.files(path, pattern = "[.][RrSsQq]$")) {
if(trace) cat(nm,":")
source(file.path(path, nm), ...)
if(trace) cat("\n")
}
}
sourceDir("fn")
batch <- 2
n.sim <- 25
start <- n.sim * (batch - 1) + 1
end <- n.sim * batch
K <- 2
N <- 300
phi <- rep(1, K)
# estimation setting
n.sample <- 60000  # of posterior samples
M <- 2             # degrees of Bernstein polynomials
# Set-up
true.beta <- beta <- matrix(c(4, 2, 3, 3, 3, 2), nrow = 3) # regression coefficients (test, D_1, D_2)
lambda <- c(0.001, 0.001)     # baseline intensity
theta.c <- 80                 # hazard for censoring time
pG <- pi <- 0.001             # maf prevalence
cancer_type <- c(1, 2)
iter <- 5
temp <- data.gen(seed = iter, N, pi, beta, lambda, theta.c, phi, miss = T)
iter <- 50
sourceDir <- function(path, trace = TRUE, ...) {
for (nm in list.files(path, pattern = "[.][RrSsQq]$")) {
if(trace) cat(nm,":")
source(file.path(path, nm), ...)
if(trace) cat("\n")
}
}
sourceDir("fn")
batch <- 2
n.sim <- 25
start <- n.sim * (batch - 1) + 1
end <- n.sim * batch
K <- 2
N <- 300
phi <- rep(1, K)
# estimation setting
n.sample <- 60000  # of posterior samples
M <- 2             # degrees of Bernstein polynomials
# Set-up
true.beta <- beta <- matrix(c(4, 2, 3, 3, 3, 2), nrow = 3) # regression coefficients (test, D_1, D_2)
lambda <- c(0.001, 0.001)     # baseline intensity
theta.c <- 80                 # hazard for censoring time
pG <- pi <- 0.001             # maf prevalence
cancer_type <- c(1, 2)
dyn.load("fn/cpp/source/CalPeelingProbLIK.so")
temp <- data.gen(seed = iter, N, pi, beta, lambda, theta.c, phi, miss = T)
sourceDir <- function(path, trace = TRUE, ...) {
for (nm in list.files(path, pattern = "[.][RrSsQq]$")) {
if(trace) cat(nm,":")
source(file.path(path, nm), ...)
if(trace) cat("\n")
}
}
sourceDir("fn")
batch <- 1
n.sim <- 25
start <- n.sim * (batch - 1) + 1
end <- n.sim * batch
K <- 2
N <- 300
phi <- rep(1, K)
# estimation setting
n.sample <- 30000  # of posterior samples
M <- 2             # degrees of Bernstein polynomials
# Set-up
true.beta <- beta <- matrix(c(4, 2, 3, 3, 3, 2), nrow = 3) # regression coefficients (test, D_1, D_2)
lambda <- c(0.001, 0.001)     # baseline intensity
theta.c <- 80                 # hazard for censoring time
pG <- pi <- 0.001             # maf prevalence
cancer_type <- c(1, 2)
iter <- 7
dyn.load("fn/cpp/source/CalPeelingProbLIK.so")
temp <- data.gen(seed = iter, N, pi, beta, lambda, theta.c, phi, miss = T)
data.obj1 <- temp$data.obj1 # pedigree
data.obj2 <- temp$data.obj2 # disease history
cancer <- temp$cancer.obj # cancer
# rescaling constant for Bernstein Polynomials
range.t <- max(unlist(lapply(data.obj2, function(x) max(x[,2])))) + 1.0e-3
# Initial Values
init  <- list(beta = true.beta - 5, gamma = matrix(1, nrow = M, ncol = K),
xi = matrix(0.1, nrow = N, ncol = K), phi = phi)
delta <- list(beta = matrix(c(0.7, 1, 0.8, 0.7, 1, 0.8), ncol = K), gamma = matrix(1, nrow = M, ncol = K),
xi = matrix(0.1, nrow = N, ncol = K), phi = rep(1, K))
# MCMC sampling
obj <- MCMC(data.obj1, data.obj2, cancer, cancer_type,
n.sample, M, pG, mRate = 0, K, init, delta, frailty = T, abc = T, range.t, check = F)
sourceDir <- function(path, trace = TRUE, ...) {
for (nm in list.files(path, pattern = "[.][RrSsQq]$")) {
if(trace) cat(nm,":")
source(file.path(path, nm), ...)
if(trace) cat("\n")
}
}
sourceDir("fn")
batch <- 2
n.sim <- 25
start <- n.sim * (batch - 1) + 1
end <- n.sim * batch
K <- 2
N <- 200
phi <- rep(1, K)
# estimation setting
n.sample <- 30000  # of posterior samples
M <- 2             # degrees of Bernstein polynomials
# Set-up
true.beta <- beta <- matrix(c(4, 2, 3, 3, 3, 2), nrow = 3) # regression coefficients (test, D_1, D_2)
lambda <- c(0.001, 0.001)     # baseline intensity
theta.c <- 80                 # hazard for censoring time
pG <- pi <- 0.001             # maf prevalence
cancer_type <- c(1, 2)
dyn.load("fn/cpp/source/CalPeelingProbLIK.so")
iter <- 1
temp <- data.gen(seed = iter, N, pi, beta, lambda, theta.c, phi, miss = T)
data.obj1 <- temp$data.obj1 # pedigree
data.obj2 <- temp$data.obj2 # disease history
cancer <- temp$cancer.obj # cancer
length(cancer)
