}
}
soldier <- new_soldier
N <- length(soldier)
p <- p/(1-q^m)
q <- 1-p
} else {
test[sim] <- test[sim] + N
break
}
}
}
test
rm(list = ls())
N <- 10000
p <- 0.01
q <- 1-p
nsim <- 1000
test <- rep(0, nsim)
for (sim in 1:nsim) {
soldier <- rbinom(N,1,p)
for (i in 1:100) {
soldier <- sample(soldier)
new_soldier <- NULL
m <- floor(-1/log(q))
if (m > 1) {
groups <- ceiling(N/m)
test[sim] <- test[sim] + groups
for (j in 1:groups) {
sp <- (j-1)*m+1
ep <- min(j*m,N)
pool <- soldier[sp:ep]
if (sum(pool) > 0) {
new_soldier <- c(new_soldier,pool)
}
}
soldier <- new_soldier
N <- length(soldier)
p <- p/(1-q^m)
q <- 1-p
} else {
test[sim] <- test[sim] + N
break
}
}
}
test
soldier
rm(list = ls())
N <- 10000
p <- 0.01
q <- 1-p
nsim <- 1000
test <- rep(0, nsim)
soldier <- rbinom(N,1,p)
for (i in 1:100) {
soldier <- sample(soldier)
new_soldier <- NULL
m <- floor(-1/log(q))
if (m > 1) {
groups <- ceiling(N/m)
test[sim] <- test[sim] + groups
for (j in 1:groups) {
sp <- (j-1)*m+1
ep <- min(j*m,N)
pool <- soldier[sp:ep]
if (sum(pool) > 0) {
new_soldier <- c(new_soldier,pool)
}
}
soldier <- new_soldier
N <- length(soldier)
p <- p/(1-q^m)
q <- 1-p
} else {
test[sim] <- test[sim] + N
break
}
}
rm(list = ls())
N <- 10000
p <- 0.01
q <- 1-p
nsim <- 1000
test <- rep(0, nsim)
for (sim in 1:1) {
soldier <- rbinom(N,1,p)
for (i in 1:100) {
soldier <- sample(soldier)
new_soldier <- NULL
m <- floor(-1/log(q))
if (m > 1) {
groups <- ceiling(N/m)
test[sim] <- test[sim] + groups
for (j in 1:groups) {
sp <- (j-1)*m+1
ep <- min(j*m,N)
pool <- soldier[sp:ep]
if (sum(pool) > 0) {
new_soldier <- c(new_soldier,pool)
}
}
soldier <- new_soldier
N <- length(soldier)
p <- p/(1-q^m)
q <- 1-p
} else {
test[sim] <- test[sim] + N
break
}
}
}
test
nsim <- 1000
test <- rep(0, nsim)
for (sim in 1:nsim) {
N <- 10000
p <- 0.01
q <- 1-p
soldier <- rbinom(N,1,p)
for (i in 1:100) {
soldier <- sample(soldier)
new_soldier <- NULL
m <- floor(-1/log(q))
if (m > 1) {
groups <- ceiling(N/m)
test[sim] <- test[sim] + groups
for (j in 1:groups) {
sp <- (j-1)*m+1
ep <- min(j*m,N)
pool <- soldier[sp:ep]
if (sum(pool) > 0) {
new_soldier <- c(new_soldier,pool)
}
}
soldier <- new_soldier
N <- length(soldier)
p <- p/(1-q^m)
q <- 1-p
} else {
test[sim] <- test[sim] + N
break
}
}
}
test
mean(test)
nsim <- 10000
test <- rep(0, nsim)
for (sim in 1:nsim) {
N <- 10000
p <- 0.01
q <- 1-p
soldier <- rbinom(N,1,p)
for (i in 1:100) {
soldier <- sample(soldier)
new_soldier <- NULL
m <- floor(-1/log(q))
if (m > 1) {
groups <- ceiling(N/m)
test[sim] <- test[sim] + groups
for (j in 1:groups) {
sp <- (j-1)*m+1
ep <- min(j*m,N)
pool <- soldier[sp:ep]
if (sum(pool) > 0) {
new_soldier <- c(new_soldier,pool)
}
}
soldier <- new_soldier
N <- length(soldier)
p <- p/(1-q^m)
q <- 1-p
} else {
test[sim] <- test[sim] + N
break
}
}
}
test
max(test)
min(test)
mean(test
)
nsim <- 100000
test <- rep(0, nsim)
for (sim in 1:nsim) {
N <- 10000
p <- 0.01
q <- 1-p
soldier <- rbinom(N,1,p)
for (i in 1:100) {
soldier <- sample(soldier)
new_soldier <- NULL
m <- floor(-1/log(q))
if (m > 1) {
groups <- ceiling(N/m)
test[sim] <- test[sim] + groups
for (j in 1:groups) {
sp <- (j-1)*m+1
ep <- min(j*m,N)
pool <- soldier[sp:ep]
if (sum(pool) > 0) {
new_soldier <- c(new_soldier,pool)
}
}
soldier <- new_soldier
N <- length(soldier)
p <- p/(1-q^m)
q <- 1-p
} else {
test[sim] <- test[sim] + N
break
}
}
}
mean(test)
max(test)
min(test)
library(LFSPRO)
?risk.mpc
View(risk.mpc)
fam.data
fam.id <- unique(fam.data$fam.id)
famdata <- fam.data[fam.data$fam.id == fam.id[1], c(1:6)]
cancerdata <- cancer.data[cancer.data$fam.id == fam.id[1],]
cid <- c(0,1,5,10)
fam.cancer.data <- combinedata(fam.data, cancer.data)
risk.mpc(fam.cancer.data[[1]], cid, parameter.mpc)
View(lfspro())
View(lfspro
View(lfspro)
View(combined.risk.mpc())
View(combined.risk.mpc)
View(risk.cs)
?lfspro
library(LFSPRO)
View(lfsproC.cs
)
View(calLK.cs)
View(peelingRC)
View(lkNoneAffect.cs)
View(calLK.mpc)
?calLK.cs
?lfsproC.cs
install.packages(clipp)
install.packages("clipp")
library(clipp)
# Read in some sample data
data("dat_small", "penet_small")
str(dat_small)
str(penet_small)
# Calculate the genotype probabilities for individual "ora008" in the family "ora"
w <- which(dat_small$family == "ora")
fam <- dat_small[w, -1]
penet <- penet_small[w, ]
monozyg <- list(c("ora024", "ora027"))  # ora024 and ora027 are identical twins
trans <- trans_monogenic(2)
geno_freq <- geno_freq_monogenic(p_alleles = c(0.9, 0.1))
genotype_probabilities(target = "ora008", fam, geno_freq, trans, penet, monozyg)
fam
penet
geno_freq
trans
30+25+65+30+30
library(LFSPRO)
?lfspro
citation()
version$version.string
library(LFSPRO)
View(lfsproC.cs)
View(calLK.cs)
?calLK.cs
lfspenet.cs
View(calLK.mpc)
fam.cancer.data <- combinedata(fam.data, cancer.data)
data.obj <- convert.data(fam.cancer.data)
data.obj1 <- data.obj[[1]]
data.obj2 <- data.obj[[2]]
data.obj2[[1]]
sourceDir <- function(path, trace = TRUE, ...) {
for (nm in list.files(path, pattern = "[.][RrSsQq]$")) {
if(trace) cat(nm,":")
source(file.path(path, nm), ...)
if(trace) cat("\n")
}
}
sourceDir("fn")
batch <- 1
n.sim <- 25
start <- n.sim * (batch - 1) + 1
end <- n.sim * batch
K <- 2
N <- 300
phi <- rep(1, K)
# estimation setting
n.sample <- 30000  # of posterior samples
M <- 2             # degrees of Bernstein polynomials
# Set-up
true.beta <- beta <- matrix(c(4, 2, 3, 3, 3, 2), nrow = 3) # regression coefficients (test, D_1, D_2)
lambda <- c(0.001, 0.001)     # baseline intensity
theta.c <- 80                 # hazard for censoring time
pG <- pi <- 0.001             # maf prevalence
cancer_type <- c(1, 2)
dyn.load("fn/cpp/source/CalPeelingProbLIK.so")
iter <- 1
temp <- data.gen(seed = iter, N, pi, beta, lambda, theta.c, phi, miss = T)
sourceDir <- function(path, trace = TRUE, ...) {
for (nm in list.files(path, pattern = "[.][RrSsQq]$")) {
if(trace) cat(nm,":")
source(file.path(path, nm), ...)
if(trace) cat("\n")
}
}
get_wd()
getwd()
sourceDir <- function(path, trace = TRUE, ...) {
for (nm in list.files(path, pattern = "[.][RrSsQq]$")) {
if(trace) cat(nm,":")
source(file.path(path, nm), ...)
if(trace) cat("\n")
}
}
sourceDir("fn")
batch <- 1
n.sim <- 25
start <- n.sim * (batch - 1) + 1
end <- n.sim * batch
K <- 2
N <- 300
phi <- rep(1, K)
# estimation setting
n.sample <- 30000  # of posterior samples
M <- 2             # degrees of Bernstein polynomials
# Set-up
true.beta <- beta <- matrix(c(4, 2, 3, 3, 3, 2), nrow = 3) # regression coefficients (test, D_1, D_2)
lambda <- c(0.001, 0.001)     # baseline intensity
theta.c <- 80                 # hazard for censoring time
pG <- pi <- 0.001             # maf prevalence
cancer_type <- c(1, 2)
iter <- 1
temp <- data.gen(seed = iter, N, pi, beta, lambda, theta.c, phi, miss = T)
getwd()
setwd("/Users/hnnguyen4/Desktop/Fam-simulation-300/Miss-20")
sourceDir <- function(path, trace = TRUE, ...) {
for (nm in list.files(path, pattern = "[.][RrSsQq]$")) {
if(trace) cat(nm,":")
source(file.path(path, nm), ...)
if(trace) cat("\n")
}
}
sourceDir("fn")
batch <- 1
n.sim <- 25
start <- n.sim * (batch - 1) + 1
end <- n.sim * batch
K <- 2
N <- 300
phi <- rep(1, K)
# estimation setting
n.sample <- 30000  # of posterior samples
M <- 2             # degrees of Bernstein polynomials
# Set-up
true.beta <- beta <- matrix(c(4, 2, 3, 3, 3, 2), nrow = 3) # regression coefficients (test, D_1, D_2)
lambda <- c(0.001, 0.001)     # baseline intensity
theta.c <- 80                 # hazard for censoring time
pG <- pi <- 0.001             # maf prevalence
cancer_type <- c(1, 2)
dyn.load("fn/cpp/source/CalPeelingProbLIK.so")
iter <- 1
temp <- data.gen(seed = iter, N, pi, beta, lambda, theta.c, phi, miss = T)
data.obj1 <- temp$data.obj1 # pedigree
data.obj2 <- temp$data.obj2 # disease history
cancer <- temp$cancer.obj # cancer
data.obj2[[1]]
library(LFSPRO)
sourceDir <- function(path, trace = TRUE, ...) {
for (nm in list.files(path, pattern = "[.][RrSsQq]$")) {
if(trace) cat(nm,":")
source(file.path(path, nm), ...)
if(trace) cat("\n")
}
}
sourceDir("fn")
batch <- 1
n.sim <- 25
start <- n.sim * (batch - 1) + 1
end <- n.sim * batch
K <- 2
N <- 200
phi <- rep(1, K)
# estimation setting
n.sample <- 30000  # of posterior samples
M <- 2             # degrees of Bernstein polynomials
# Set-up
true.beta <- beta <- matrix(c(4, 2, 3, 3, 3, 2), nrow = 3) # regression coefficients (test, D_1, D_2)
lambda <- c(0.001, 0.001)     # baseline intensity
theta.c <- 80                 # hazard for censoring time
pG <- pi <- 0.001             # maf prevalence
cancer_type <- c(1, 2)
dyn.load("fn/cpp/source/CalPeelingProbLIK.so")
iter <- 1
temp <- data.gen(seed = iter, N, pi, beta, lambda, theta.c, phi, miss = T)
data.obj1 <- temp$data.obj1 # pedigree
data.obj2 <- temp$data.obj2 # disease history
cancer <- temp$cancer.obj # cancer
# rescaling constant for Bernstein Polynomials
range.t <- max(unlist(lapply(data.obj2, function(x) max(x[,2])))) + 1.0e-3
# Initial Values
init  <- list(beta = true.beta - 5, gamma = matrix(1, nrow = M, ncol = K),
xi = matrix(0.1, nrow = N, ncol = K), phi = phi)
delta <- list(beta = matrix(c(0.7, 1, 0.8, 0.7, 1, 0.8), ncol = K), gamma = matrix(1, nrow = M, ncol = K),
xi = matrix(0.1, nrow = N, ncol = K), phi = rep(1, K))
# MCMC sampling
obj <- MCMC(data.obj1, data.obj2, cancer, cancer_type,
n.sample, M, pG, mRate = 0, K, init, delta, frailty = T, abc = T, range.t, check = F)
dyn.load("fn/cpp/source/CalPeelingProbLIK.so")
dyn.load("fn/cpp/source/CalPeelingProbLIK.so")
# MCMC sampling
obj <- MCMC(data.obj1, data.obj2, cancer, cancer_type,
n.sample, M, pG, mRate = 0, K, init, delta, frailty = T, abc = T, range.t, check = F)
library(LFSPRO)
sourceDir <- function(path, trace = TRUE, ...) {
for (nm in list.files(path, pattern = "[.][RrSsQq]$")) {
if(trace) cat(nm,":")
source(file.path(path, nm), ...)
if(trace) cat("\n")
}
}
sourceDir("fn")
batch <- 1
n.sim <- 25
start <- n.sim * (batch - 1) + 1
end <- n.sim * batch
K <- 2
N <- 200
phi <- rep(1, K)
# estimation setting
n.sample <- 30000  # of posterior samples
M <- 2             # degrees of Bernstein polynomials
# Set-up
true.beta <- beta <- matrix(c(4, 2, 3, 3, 3, 2), nrow = 3) # regression coefficients (test, D_1, D_2)
lambda <- c(0.001, 0.001)     # baseline intensity
theta.c <- 80                 # hazard for censoring time
pG <- pi <- 0.001             # maf prevalence
cancer_type <- c(1, 2)
dyn.load("fn/cpp/source/CalPeelingProbLIK.so")
iter <- 1
temp <- data.gen(seed = iter, N, pi, beta, lambda, theta.c, phi, miss = T)
data.obj1 <- temp$data.obj1 # pedigree
data.obj2 <- temp$data.obj2 # disease history
cancer <- temp$cancer.obj # cancer
# rescaling constant for Bernstein Polynomials
range.t <- max(unlist(lapply(data.obj2, function(x) max(x[,2])))) + 1.0e-3
# Initial Values
init  <- list(beta = true.beta - 5, gamma = matrix(1, nrow = M, ncol = K),
xi = matrix(0.1, nrow = N, ncol = K), phi = phi)
delta <- list(beta = matrix(c(0.7, 1, 0.8, 0.7, 1, 0.8), ncol = K), gamma = matrix(1, nrow = M, ncol = K),
xi = matrix(0.1, nrow = N, ncol = K), phi = rep(1, K))
# MCMC sampling
obj <- MCMC(data.obj1, data.obj2, cancer, cancer_type,
n.sample, M, pG, mRate = 0, K, init, delta, frailty = T, abc = T, range.t, check = F)
getwd()
sourceDir <- function(path, trace = TRUE, ...) {
for (nm in list.files(path, pattern = "[.][RrSsQq]$")) {
if(trace) cat(nm,":")
source(file.path(path, nm), ...)
if(trace) cat("\n")
}
}
sourceDir("fn")
library(LFSPRO)
sourceDir <- function(path, trace = TRUE, ...) {
for (nm in list.files(path, pattern = "[.][RrSsQq]$")) {
if(trace) cat(nm,":")
source(file.path(path, nm), ...)
if(trace) cat("\n")
}
}
sourceDir("fn")
batch <- 1
n.sim <- 25
start <- n.sim * (batch - 1) + 1
end <- n.sim * batch
K <- 2
N <- 200
phi <- rep(1, K)
# estimation setting
n.sample <- 30000  # of posterior samples
M <- 2             # degrees of Bernstein polynomials
# Set-up
true.beta <- beta <- matrix(c(4, 2, 3, 3, 3, 2), nrow = 3) # regression coefficients (test, D_1, D_2)
lambda <- c(0.001, 0.001)     # baseline intensity
theta.c <- 80                 # hazard for censoring time
pG <- pi <- 0.001             # maf prevalence
cancer_type <- c(1, 2)
dyn.load("fn/cpp/source/CalPeelingProbLIK.so")
iter <- 1
temp <- data.gen(seed = iter, N, pi, beta, lambda, theta.c, phi, miss = T)
data.obj1 <- temp$data.obj1 # pedigree
data.obj2 <- temp$data.obj2 # disease history
cancer <- temp$cancer.obj # cancer
# rescaling constant for Bernstein Polynomials
range.t <- max(unlist(lapply(data.obj2, function(x) max(x[,2])))) + 1.0e-3
# Initial Values
init  <- list(beta = true.beta - 5, gamma = matrix(1, nrow = M, ncol = K),
xi = matrix(0.1, nrow = N, ncol = K), phi = phi)
delta <- list(beta = matrix(c(0.7, 1, 0.8, 0.7, 1, 0.8), ncol = K), gamma = matrix(1, nrow = M, ncol = K),
xi = matrix(0.1, nrow = N, ncol = K), phi = rep(1, K))
# MCMC sampling
obj <- MCMC(data.obj1, data.obj2, cancer, cancer_type,
n.sample, M, pG, mRate = 0, K, init, delta, frailty = T, abc = T, range.t, check = F)
